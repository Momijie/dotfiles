(defwidget bar []
  (box
    :class "bar"
    :orientation "h"
    :space-evenly false
    (left)
    (right)
  )
)

(defwidget left []
  (box
    :space-evenly false
    (workspaces)
  )
)
(defwidget right []
  (box
    :halign "end"
    :hexpand true
    :space-evenly false
    (cpu)
    (spacer)
    (ram)
    (spacer)
    (disk)
    (spacer)
    (date)
  )
)

(defwidget workspaces []
  (eventbox
    :cursor "hand"
    :onscroll "./scripts/workspace_scroll.sh {}"
    (box
      (literal :content workspaces_listen)
    )
  )
)

(defwidget spacer []
  (label :class "spacer" :text "|")
)

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
    :orientation "h"
    :halign "end"
    :space-evenly false
    :width 50
    :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))

(defwidget ram []
  (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem / (1024*1024*1024), 2)} GB (${round(EWW_RAM.total_mem / (1024*1024*1024), 2)} GB)")))

(defwidget date []
  (icon-module :class "date" :icon ""
    (label :text time_poll)
  )
)
(defwidget cpu []
  (icon-module :class "cpu" :icon ""
    (label :text "${round(EWW_CPU.avg, 0)}%")))

(defwidget battery []
  (icon-module :class "cpu" :icon ""
    (label :text "${round(EWW_CPU.avg, 0)}%")))

(defwidget disk []
  (icon-module :class "disk" :icon ""
    (label :text "${round(EWW_DISK["/"].used / (1024*1024*1024), 2)} GB (${round(EWW_DISK["/"].total / (1024*1024*1024),2)} GB)")))

